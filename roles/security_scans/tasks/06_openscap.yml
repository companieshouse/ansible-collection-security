---
- name: Set OpenSCAP content path
  ansible.builtin.set_fact:
    security_scans_oscap_content_path: "/usr/share/xml/scap/ssg/content/ssg-{{ security_scans_oscap_target_os }}-ds.xml"

- name: Construct OpenSCAP profile ID
  ansible.builtin.set_fact:
    security_scans_oscap_profile_id: "xccdf_org.ssgproject.content_profile_{{ security_scans_oscap_profile }}"

- name: Run OpenSCAP scan
  ansible.builtin.command: >
    oscap xccdf eval
    --profile {{ security_scans_oscap_profile_id }}
    --results {{ security_scans_temp_scan_dir.path }}/oscap.xml
    {{ security_scans_oscap_content_path }}
  register: security_scans_oscap_scan
  failed_when: security_scans_oscap_scan.rc == 1
  changed_when: false
  become: true

- name: Generate OpenSCAP HTML report
  ansible.builtin.command: >
    oscap xccdf generate report
    --output {{ security_scans_temp_scan_dir.path }}/oscap.html
    {{ security_scans_temp_scan_dir.path }}/oscap.xml
  when: security_scans_oscap_scan is succeeded
  register: security_scans_oscap_report
  changed_when: false
  become: true

- name: Extract OpenSCAP summary
  ansible.builtin.shell: |
    set -o pipefail
    HTML_FILE="{{ security_scans_temp_scan_dir.path }}/oscap.html"

    # Extract characteristics (no colors)
    echo "=== Evaluation Characteristics ==="
    lynx -dump "$HTML_FILE" | awk '
      /Evaluation Characteristics/ { found=1; next }
      /Compliance and Scoring/ { found=0 }
      found && NF > 0 { print }
    '

    echo ""
    echo "=== Compliance and Scoring ==="

    # Extract compliance section with simple colors
    lynx -dump "$HTML_FILE" | awk '
      /Compliance and Scoring/ { found=1; next }
      /Rule Overview/ { found=0 }
      found && NF > 0 {
        # Apply colors - match numbers followed by words
        gsub(/[0-9]+ passed/, "\033[0;32m&\033[0m")
        gsub(/[0-9]+ failed/, "\033[0;31m&\033[0m")
        gsub(/[0-9]+ high/, "\033[0;31m&\033[0m")
        gsub(/[0-9]+ medium/, "\033[1;33m&\033[0m")
        gsub(/[0-9]+ low/, "\033[0;36m&\033[0m")
        gsub(/[0-9]+\.[0-9]+%/, "\033[1m&\033[0m")
        print
      }
    '
  register: security_scans_oscap_summary
  changed_when: false
  become: true
  when: security_scans_oscap_report is succeeded
  args:
    executable: /bin/bash

- name: Display OpenSCAP summary
  ansible.builtin.debug:
    msg: ""
  with_items:
    - "\n{{ security_scans_oscap_summary.stdout }}"
  when: security_scans_oscap_summary.stdout is defined

- name: Deploy parse_oscap_failures script
  ansible.builtin.template:
    src: parse_oscap_failures.sh.j2
    dest: "{{ security_scans_temp_scan_dir.path }}/parse_oscap_failures.sh"
    mode: "0755"
  become: true
  when: security_scans_oscap_report is succeeded

- name: Extract OpenSCAP failed rules from HTML report
  ansible.builtin.command: "{{ security_scans_temp_scan_dir.path }}/parse_oscap_failures.sh {{ security_scans_temp_scan_dir.path }}/oscap.html"
  register: security_scans_oscap_failed_rules
  changed_when: false
  become: true
  when: security_scans_oscap_report is succeeded

- name: Display OpenSCAP failed rules
  ansible.builtin.debug:
    msg: ""
  with_items:
    - "\n{{ security_scans_oscap_failed_rules.stdout }}"
  when: security_scans_oscap_failed_rules.stdout is defined and security_scans_oscap_failed_rules.stdout | length > 0

- name: Remove parse_oscap_failures script
  ansible.builtin.file:
    path: "{{ security_scans_temp_scan_dir.path }}/parse_oscap_failures.sh"
    state: absent
  become: true
  when: security_scans_oscap_report is succeeded
